/** Copyright (c) 2017 Samsung Electronics Co., Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
// This File has been auto-generated by SWIG and then modified using DALi Ruby Scripts
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.9
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Dali {

    using System;
    using System.Runtime.InteropServices;

public partial class Actor : Handle {

  public override void Dispose() {
    if (!Stage.IsInstalled()) {
      DisposeQueue.Instance.Add(this);
      return;
    }

    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NDalicPINVOKE.delete_Actor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    public Actor Parent
    {
      get
      {
        return GetParent();
      }
    }

   public bool Visibility
   {
      get
      {
        return IsVisible();
      }
    }

   public float Opacity
   {
      set
      {
        SetOpacity(value);
      }
      get
      {
        return GetCurrentOpacity();
      }
   }

    public bool StateFocusEnable
    {
      set
      {
        SetKeyboardFocusable(value);
      }
      get
      {
        return IsKeyboardFocusable();
      }
    }

    public bool IsOnStage
    {
      get
      {
        return OnStage();
      }
    }

    public void Show()
    {
      SetVisible(true);
    }

    public void Hide()
    {
      SetVisible(false);
    }


  public Actor () : this (NDalicPINVOKE.Actor_New(), true) {
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();

  }

  public uint GetId() {
    uint ret = NDalicPINVOKE.Actor_GetId(swigCPtr);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsRoot() {
    bool ret = NDalicPINVOKE.Actor_IsRoot(swigCPtr);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }



  public void Add(Actor child) {
    NDalicPINVOKE.Actor_Add(swigCPtr, Actor.getCPtr(child));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Remove(Actor child) {
    NDalicPINVOKE.Actor_Remove(swigCPtr, Actor.getCPtr(child));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Unparent() {
    NDalicPINVOKE.Actor_Unparent(swigCPtr);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetChildCount() {
    uint ret = NDalicPINVOKE.Actor_GetChildCount(swigCPtr);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Actor GetChildAt(uint index) {
    Actor ret = new Actor(NDalicPINVOKE.Actor_GetChildAt(swigCPtr, index), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Actor FindChildByName(string actorName) {
    Actor ret = new Actor(NDalicPINVOKE.Actor_FindChildByName(swigCPtr, actorName), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Actor FindChildById(uint id) {
    Actor ret = new Actor(NDalicPINVOKE.Actor_FindChildById(swigCPtr, id), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  public Vector3 ParentOrigin 
  { 
    get 
    {
      Vector3 temp = new Vector3(0.0f,0.0f,0.0f);
      GetProperty( Actor.Property.PARENT_ORIGIN).Get(  temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.PARENT_ORIGIN, new Dali.Property.Value( value ) );
    }
  }
  public float ParentOriginX 
  { 
    get 
    {
      float temp = 0.0f;
      GetProperty( Actor.Property.PARENT_ORIGIN_X).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.PARENT_ORIGIN_X, new Dali.Property.Value( value ) );
    }
  }
  public float ParentOriginY 
  { 
    get 
    {
      float temp = 0.0f;
      GetProperty( Actor.Property.PARENT_ORIGIN_Y).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.PARENT_ORIGIN_Y, new Dali.Property.Value( value ) );
    }
  }
  public float ParentOriginZ 
  { 
    get 
    {
      float temp = 0.0f;
      GetProperty( Actor.Property.PARENT_ORIGIN_Z).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.PARENT_ORIGIN_Z, new Dali.Property.Value( value ) );
    }
  }
  public Vector3 AnchorPoint 
  { 
    get 
    {
      Vector3 temp = new Vector3(0.0f,0.0f,0.0f);
      GetProperty( Actor.Property.ANCHOR_POINT).Get(  temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.ANCHOR_POINT, new Dali.Property.Value( value ) );
    }
  }
  public float AnchorPointX 
  { 
    get 
    {
      float temp = 0.0f;
      GetProperty( Actor.Property.ANCHOR_POINT_X).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.ANCHOR_POINT_X, new Dali.Property.Value( value ) );
    }
  }
  public float AnchorPointY 
  { 
    get 
    {
      float temp = 0.0f;
      GetProperty( Actor.Property.ANCHOR_POINT_Y).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.ANCHOR_POINT_Y, new Dali.Property.Value( value ) );
    }
  }
  public float AnchorPointZ 
  { 
    get 
    {
      float temp = 0.0f;
      GetProperty( Actor.Property.ANCHOR_POINT_Z).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.ANCHOR_POINT_Z, new Dali.Property.Value( value ) );
    }
  }
  public Vector3 Size 
  { 
    get 
    {
      Vector3 temp = new Vector3(0.0f,0.0f,0.0f);
      GetProperty( Actor.Property.SIZE).Get(  temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.SIZE, new Dali.Property.Value( value ) );
    }
  }
  public float SizeWidth 
  { 
    get 
    {
      float temp = 0.0f;
      GetProperty( Actor.Property.SIZE_WIDTH).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.SIZE_WIDTH, new Dali.Property.Value( value ) );
    }
  }
  public float SizeHeight 
  { 
    get 
    {
      float temp = 0.0f;
      GetProperty( Actor.Property.SIZE_HEIGHT).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.SIZE_HEIGHT, new Dali.Property.Value( value ) );
    }
  }
  public float SizeDepth 
  { 
    get 
    {
      float temp = 0.0f;
      GetProperty( Actor.Property.SIZE_DEPTH).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.SIZE_DEPTH, new Dali.Property.Value( value ) );
    }
  }
  public Vector3 Position 
  { 
    get 
    {
      Vector3 temp = new Vector3(0.0f,0.0f,0.0f);
      GetProperty( Actor.Property.POSITION).Get(  temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.POSITION, new Dali.Property.Value( value ) );
    }
  }
  public float PositionX 
  { 
    get 
    {
      float temp = 0.0f;
      GetProperty( Actor.Property.POSITION_X).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.POSITION_X, new Dali.Property.Value( value ) );
    }
  }
  public float PositionY 
  { 
    get 
    {
      float temp = 0.0f;
      GetProperty( Actor.Property.POSITION_Y).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.POSITION_Y, new Dali.Property.Value( value ) );
    }
  }
  public float PositionZ 
  { 
    get 
    {
      float temp = 0.0f;
      GetProperty( Actor.Property.POSITION_Z).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.POSITION_Z, new Dali.Property.Value( value ) );
    }
  }
  public Vector3 WorldPosition 
  { 
    get 
    {
      Vector3 temp = new Vector3(0.0f,0.0f,0.0f);
      GetProperty( Actor.Property.WORLD_POSITION).Get(  temp );
      return temp;
    }
}  public float WorldPositionX 
  { 
    get 
    {
      float temp = 0.0f;
      GetProperty( Actor.Property.WORLD_POSITION_X).Get( ref temp );
      return temp;
    }
}  public float WorldPositionY 
  { 
    get 
    {
      float temp = 0.0f;
      GetProperty( Actor.Property.WORLD_POSITION_Y).Get( ref temp );
      return temp;
    }
}  public float WorldPositionZ 
  { 
    get 
    {
      float temp = 0.0f;
      GetProperty( Actor.Property.WORLD_POSITION_Z).Get( ref temp );
      return temp;
    }
}  public Quaternion Orientation 
  { 
    get 
    {
      Quaternion temp = new Quaternion();
      GetProperty( Actor.Property.ORIENTATION).Get(  temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.ORIENTATION, new Dali.Property.Value( value ) );
    }
  }
  public Quaternion WorldOrientation 
  { 
    get 
    {
      Quaternion temp = new Quaternion();
      GetProperty( Actor.Property.WORLD_ORIENTATION).Get(  temp );
      return temp;
    }
}  public Vector3 Scale 
  { 
    get 
    {
      Vector3 temp = new Vector3(0.0f,0.0f,0.0f);
      GetProperty( Actor.Property.SCALE).Get(  temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.SCALE, new Dali.Property.Value( value ) );
    }
  }
  public float ScaleX 
  { 
    get 
    {
      float temp = 0.0f;
      GetProperty( Actor.Property.SCALE_X).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.SCALE_X, new Dali.Property.Value( value ) );
    }
  }
  public float ScaleY 
  { 
    get 
    {
      float temp = 0.0f;
      GetProperty( Actor.Property.SCALE_Y).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.SCALE_Y, new Dali.Property.Value( value ) );
    }
  }
  public float ScaleZ 
  { 
    get 
    {
      float temp = 0.0f;
      GetProperty( Actor.Property.SCALE_Z).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.SCALE_Z, new Dali.Property.Value( value ) );
    }
  }
  public Vector3 WorldScale 
  { 
    get 
    {
      Vector3 temp = new Vector3(0.0f,0.0f,0.0f);
      GetProperty( Actor.Property.WORLD_SCALE).Get(  temp );
      return temp;
    }
}  public bool Visible 
  { 
    get 
    {
      bool temp = false;
      GetProperty( Actor.Property.VISIBLE).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.VISIBLE, new Dali.Property.Value( value ) );
    }
  }
  public Vector4 Color 
  { 
    get 
    {
      Vector4 temp = new Vector4(0.0f,0.0f,0.0f,0.0f);
      GetProperty( Actor.Property.COLOR).Get(  temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.COLOR, new Dali.Property.Value( value ) );
    }
  }
  public float ColorRed 
  { 
    get 
    {
      float temp = 0.0f;
      GetProperty( Actor.Property.COLOR_RED).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.COLOR_RED, new Dali.Property.Value( value ) );
    }
  }
  public float ColorGreen 
  { 
    get 
    {
      float temp = 0.0f;
      GetProperty( Actor.Property.COLOR_GREEN).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.COLOR_GREEN, new Dali.Property.Value( value ) );
    }
  }
  public float ColorBlue 
  { 
    get 
    {
      float temp = 0.0f;
      GetProperty( Actor.Property.COLOR_BLUE).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.COLOR_BLUE, new Dali.Property.Value( value ) );
    }
  }
  public float ColorAlpha 
  { 
    get 
    {
      float temp = 0.0f;
      GetProperty( Actor.Property.COLOR_ALPHA).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.COLOR_ALPHA, new Dali.Property.Value( value ) );
    }
  }
  public Vector4 WorldColor 
  { 
    get 
    {
      Vector4 temp = new Vector4(0.0f,0.0f,0.0f,0.0f);
      GetProperty( Actor.Property.WORLD_COLOR).Get(  temp );
      return temp;
    }
}  public Matrix WorldMatrix 
  { 
    get 
    {
      Matrix temp = new Matrix();
      GetProperty( Actor.Property.WORLD_MATRIX).Get(  temp );
      return temp;
    }
}  public string Name 
  { 
    get 
    {
      string temp;
      GetProperty( Actor.Property.NAME).Get( out temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.NAME, new Dali.Property.Value( value ) );
    }
  }
  public bool Sensitive 
  { 
    get 
    {
      bool temp = false;
      GetProperty( Actor.Property.SENSITIVE).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.SENSITIVE, new Dali.Property.Value( value ) );
    }
  }
  public bool LeaveRequired 
  { 
    get 
    {
      bool temp = false;
      GetProperty( Actor.Property.LEAVE_REQUIRED).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.LEAVE_REQUIRED, new Dali.Property.Value( value ) );
    }
  }
  public bool InheritOrientation 
  { 
    get 
    {
      bool temp = false;
      GetProperty( Actor.Property.INHERIT_ORIENTATION).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.INHERIT_ORIENTATION, new Dali.Property.Value( value ) );
    }
  }
  public bool InheritScale 
  { 
    get 
    {
      bool temp = false;
      GetProperty( Actor.Property.INHERIT_SCALE).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.INHERIT_SCALE, new Dali.Property.Value( value ) );
    }
  }
  public string ColorMode 
  { 
    get 
    {
      string temp;
      GetProperty( Actor.Property.COLOR_MODE).Get( out temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.COLOR_MODE, new Dali.Property.Value( value ) );
    }
  }
  public string PositionInheritance 
  { 
    get 
    {
      string temp;
      GetProperty( Actor.Property.POSITION_INHERITANCE).Get( out temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.POSITION_INHERITANCE, new Dali.Property.Value( value ) );
    }
  }
  public string DrawMode 
  { 
    get 
    {
      string temp;
      GetProperty( Actor.Property.DRAW_MODE).Get( out temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.DRAW_MODE, new Dali.Property.Value( value ) );
    }
  }
  public Vector3 SizeModeFactor 
  { 
    get 
    {
      Vector3 temp = new Vector3(0.0f,0.0f,0.0f);
      GetProperty( Actor.Property.SIZE_MODE_FACTOR).Get(  temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.SIZE_MODE_FACTOR, new Dali.Property.Value( value ) );
    }
  }
  public string WidthResizePolicy 
  { 
    get 
    {
      string temp;
      GetProperty( Actor.Property.WIDTH_RESIZE_POLICY).Get( out temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.WIDTH_RESIZE_POLICY, new Dali.Property.Value( value ) );
    }
  }
  public string HeightResizePolicy 
  { 
    get 
    {
      string temp;
      GetProperty( Actor.Property.HEIGHT_RESIZE_POLICY).Get( out temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.HEIGHT_RESIZE_POLICY, new Dali.Property.Value( value ) );
    }
  }
  public string SizeScalePolicy 
  { 
    get 
    {
      string temp;
      GetProperty( Actor.Property.SIZE_SCALE_POLICY).Get( out temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.SIZE_SCALE_POLICY, new Dali.Property.Value( value ) );
    }
  }
  public bool WidthForHeight 
  { 
    get 
    {
      bool temp = false;
      GetProperty( Actor.Property.WIDTH_FOR_HEIGHT).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.WIDTH_FOR_HEIGHT, new Dali.Property.Value( value ) );
    }
  }
  public bool HeightForWidth 
  { 
    get 
    {
      bool temp = false;
      GetProperty( Actor.Property.HEIGHT_FOR_WIDTH).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.HEIGHT_FOR_WIDTH, new Dali.Property.Value( value ) );
    }
  }
  public Vector4 Padding 
  { 
    get 
    {
      Vector4 temp = new Vector4(0.0f,0.0f,0.0f,0.0f);
      GetProperty( Actor.Property.PADDING).Get(  temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.PADDING, new Dali.Property.Value( value ) );
    }
  }
  public Vector2 MinimumSize 
  { 
    get 
    {
      Vector2 temp = new Vector2(0.0f,0.0f);
      GetProperty( Actor.Property.MINIMUM_SIZE).Get(  temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.MINIMUM_SIZE, new Dali.Property.Value( value ) );
    }
  }
  public Vector2 MaximumSize 
  { 
    get 
    {
      Vector2 temp = new Vector2(0.0f,0.0f);
      GetProperty( Actor.Property.MAXIMUM_SIZE).Get(  temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.MAXIMUM_SIZE, new Dali.Property.Value( value ) );
    }
  }
  public bool InheritPosition 
  { 
    get 
    {
      bool temp = false;
      GetProperty( Actor.Property.INHERIT_POSITION).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.INHERIT_POSITION, new Dali.Property.Value( value ) );
    }
  }
  public string ClippingMode 
  { 
    get 
    {
      string temp;
      GetProperty( Actor.Property.CLIPPING_MODE).Get( out temp );
      return temp;
    }
    set 
    { 
      SetProperty( Actor.Property.CLIPPING_MODE, new Dali.Property.Value( value ) );
    }
  }

}

}
