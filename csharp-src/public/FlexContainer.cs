/** Copyright (c) 2017 Samsung Electronics Co., Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
// This File has been auto-generated by SWIG and then modified using DALi Ruby Scripts
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.9
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Dali {

public partial class FlexContainer : View {

  public override void Dispose() {
    if (!Stage.IsInstalled()) {
      DisposeQueue.Instance.Add(this);
      return;
    }

    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NDalicPINVOKE.delete_FlexContainer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }




  public FlexContainer () : this (NDalicPINVOKE.FlexContainer_New(), true) {
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();

  }

  public enum FlexDirectionType {
    COLUMN,
    COLUMN_REVERSE,
    ROW,
    ROW_REVERSE
  }

  public enum ContentDirectionType {
    INHERIT,
    LTR,
    RTL
  }

  public enum Justification {
    JUSTIFY_FLEX_START,
    JUSTIFY_CENTER,
    JUSTIFY_FLEX_END,
    JUSTIFY_SPACE_BETWEEN,
    JUSTIFY_SPACE_AROUND
  }

  public enum Alignment {
    ALIGN_AUTO,
    ALIGN_FLEX_START,
    ALIGN_CENTER,
    ALIGN_FLEX_END,
    ALIGN_STRETCH
  }

  public enum WrapType {
    NO_WRAP,
    WRAP
  }


  public int ContentDirection 
  { 
    get 
    {
      int temp = 0;
      GetProperty( FlexContainer.Property.CONTENT_DIRECTION).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( FlexContainer.Property.CONTENT_DIRECTION, new Dali.Property.Value( value ) );
    }
  }
  public int FlexDirection 
  { 
    get 
    {
      int temp = 0;
      GetProperty( FlexContainer.Property.FLEX_DIRECTION).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( FlexContainer.Property.FLEX_DIRECTION, new Dali.Property.Value( value ) );
    }
  }
  public int FlexWrap 
  { 
    get 
    {
      int temp = 0;
      GetProperty( FlexContainer.Property.FLEX_WRAP).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( FlexContainer.Property.FLEX_WRAP, new Dali.Property.Value( value ) );
    }
  }
  public int JustifyContent 
  { 
    get 
    {
      int temp = 0;
      GetProperty( FlexContainer.Property.JUSTIFY_CONTENT).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( FlexContainer.Property.JUSTIFY_CONTENT, new Dali.Property.Value( value ) );
    }
  }
  public int AlignItems 
  { 
    get 
    {
      int temp = 0;
      GetProperty( FlexContainer.Property.ALIGN_ITEMS).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( FlexContainer.Property.ALIGN_ITEMS, new Dali.Property.Value( value ) );
    }
  }
  public int AlignContent 
  { 
    get 
    {
      int temp = 0;
      GetProperty( FlexContainer.Property.ALIGN_CONTENT).Get( ref temp );
      return temp;
    }
    set 
    { 
      SetProperty( FlexContainer.Property.ALIGN_CONTENT, new Dali.Property.Value( value ) );
    }
  }

}

}
