//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.9
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NUI {

    using System;
    using System.Runtime.InteropServices;


public class Application : BaseHandle {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Application(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NDalicPINVOKE.Application_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Application obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Application() {
    DisposeQueue.Instance.Add(this);
  }

  public override void Dispose() {
    if (!Stage.IsInstalled()) {
      DisposeQueue.Instance.Add(this);
      return;
    }

    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NDalicPINVOKE.delete_Application(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }




    private EventHandler _applicationInitEventHandler;
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void ApplicationInitEventCallbackType(IntPtr data);
    private ApplicationInitEventCallbackType _applicationInitEventCallback;

    /**
      * @brief Event for Initialized signal which can be used to subscribe/unsubscribe the event handler
      *  provided by the user. Initialized signal is emitted when application is initialised
      */
    public event EventHandler Initialized
    {
      add
      {
        if( _applicationInitEventHandler == null )
        {
          _applicationInitEventCallback = OnApplicationInit;
          this.InitSignal().Connect( _applicationInitEventCallback );
        }

        _applicationInitEventHandler += value;
      }

      remove
      {
        if( _applicationInitEventHandler != null )
        {
          this.InitSignal().Disconnect( _applicationInitEventCallback );
        }

        _applicationInitEventHandler -= value;
      }
    }

    private void OnApplicationInit(IntPtr data)
    {
      if( _applicationInitEventHandler != null )
      {
        _applicationInitEventHandler( this, null );
      }
    }


    private EventHandler _applicationTerminateEventHandler;
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void ApplicationTerminateEventCallbackType(IntPtr data);
    private ApplicationTerminateEventCallbackType _applicationTerminateEventCallback;

    /**
      * @brief Event for Terminated signal which can be used to subscribe/unsubscribe the event handler
      *  provided by the user. Terminated signal is emitted when application is terminated
      */
    public event EventHandler Terminated
    {
      add
      {
        if( _applicationTerminateEventHandler == null )
        {
          _applicationTerminateEventCallback = OnNUIApplicationTerminate;
          this.TerminateSignal().Connect( _applicationTerminateEventCallback );
        }

        _applicationTerminateEventHandler += value;
      }

      remove
      {
        if( _applicationTerminateEventHandler != null )
        {
          this.TerminateSignal().Disconnect( _applicationTerminateEventCallback );
        }

        _applicationTerminateEventHandler -= value;
      }
    }

    private void OnNUIApplicationTerminate(IntPtr data)
    {
      if( _applicationTerminateEventHandler != null )
      {
        _applicationTerminateEventHandler( this, null );
      }
    }


    private EventHandler _applicationPauseEventHandler;
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void ApplicationPauseEventCallbackType(IntPtr data);
    private ApplicationPauseEventCallbackType _applicationPauseEventCallback;

    /**
      * @brief Event for Paused signal which can be used to subscribe/unsubscribe the event handler
      * provided by the user. Paused signal is emitted when application is paused
      */
    public event EventHandler Paused
    {
      add
      {
        if( _applicationPauseEventHandler == null )
        {
          _applicationPauseEventCallback = OnNUIApplicationPause;
          this.PauseSignal().Connect( _applicationPauseEventCallback );
        }

        _applicationPauseEventHandler += value;
      }

      remove
      {
        if( _applicationPauseEventHandler != null )
        {
          this.PauseSignal().Disconnect( _applicationPauseEventCallback );
        }

        _applicationTerminateEventHandler -= value;
      }
    }

    private void OnNUIApplicationPause(IntPtr data)
    {
      if( _applicationPauseEventHandler != null )
      {
        _applicationPauseEventHandler( this, null );
      }
    }


    private EventHandler _applicationResumeEventHandler;
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void ApplicationResumeEventCallbackType(IntPtr data);
    private ApplicationResumeEventCallbackType _applicationResumeEventCallback;

    /**
      * @brief Event for Resumed signal which can be used to subscribe/unsubscribe the event handler
      *  provided by the user. Resumed signal is emitted when application is resumed
      */
    public event EventHandler Resumed
    {
      add
      {
        if( _applicationResumeEventHandler == null )
        {
          _applicationResumeEventCallback = OnNUIApplicationResume;
          this.ResumeSignal().Connect( _applicationResumeEventCallback );
        }

        _applicationResumeEventHandler += value;
      }

      remove
      {
        if( _applicationResumeEventHandler != null )
        {
          this.ResumeSignal().Disconnect( _applicationResumeEventCallback );
        }

        _applicationResumeEventHandler -= value;
      }
    }

    private void OnNUIApplicationResume(IntPtr data)
    {
      if( _applicationResumeEventHandler != null )
      {
        _applicationResumeEventHandler( this, null );
      }
    }


    private EventHandler _applicationResetEventHandler;
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void ApplicationResetEventCallbackType(IntPtr data);
    private ApplicationResetEventCallbackType _applicationResetEventCallback;

    /**
      * @brief Event for Reset signal which can be used to subscribe/unsubscribe the event handler
      *  provided by the user. Reset signal is emitted when application is reset
      */
    public event EventHandler Reset
    {
      add
      {
        if( _applicationResetEventHandler == null )
        {
          _applicationResetEventCallback = OnNUIApplicationReset;
          this.ResetSignal().Connect( _applicationResetEventCallback );
        }

        _applicationResetEventHandler += value;
      }

      remove
      {
        if( _applicationResetEventHandler != null )
        {
          this.ResetSignal().Disconnect( _applicationResetEventCallback );
        }

        _applicationResetEventHandler -= value;
      }
    }

    private void OnNUIApplicationReset(IntPtr data)
    {
      if( _applicationResetEventHandler != null )
      {
        _applicationResetEventHandler( this, null );
      }
    }



    private EventHandler _applicationResizeEventHandler;
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void ApplicationResizeEventCallbackType(IntPtr data);
    private ApplicationResizeEventCallbackType _applicationResizeEventCallback;

    /**
      * @brief Event for Resized signal which can be used to subscribe/unsubscribe the event handler
      *  provided by the user. Resized signal is emitted when application is resized
      */
    public event EventHandler Resized
    {
      add
      {
        if( _applicationResizeEventHandler == null )
        {
          _applicationResizeEventCallback = OnNUIApplicationResize;
          this.ResizeSignal().Connect( _applicationResizeEventCallback );
        }

        _applicationResizeEventHandler += value;
      }

      remove
      {
        if( _applicationResizeEventHandler != null )
        {
          this.ResizeSignal().Disconnect( _applicationResizeEventCallback );
        }

        _applicationResizeEventHandler -= value;
      }
    }

    private void OnNUIApplicationResize(IntPtr data)
    {
      if( _applicationResizeEventHandler != null )
      {
        _applicationResizeEventHandler( this, null );
      }
    }


    private EventHandler _applicationLanguageChangedEventHandler;
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void ApplicationLanguageChangedEventCallbackType(IntPtr data);
    private ApplicationLanguageChangedEventCallbackType _applicationLanguageChangedEventCallback;

    /**
      * @brief Event for Paused signal which can be used to subscribe/unsubscribe the event handler
      * provided by the user. Paused signal is emitted when application is paused
      */
    public event EventHandler LanguageChanged
    {
      add
      {
        if( _applicationLanguageChangedEventHandler == null )
        {
          _applicationLanguageChangedEventCallback = OnNUIApplicationLanguageChanged;
          this.LanguageChangedSignal().Connect( _applicationLanguageChangedEventCallback );
        }

        _applicationLanguageChangedEventHandler += value;
      }

      remove
      {
        if( _applicationLanguageChangedEventHandler != null )
        {
          this.LanguageChangedSignal().Disconnect( _applicationLanguageChangedEventCallback );
        }

        _applicationLanguageChangedEventHandler -= value;
      }
    }

    private void OnNUIApplicationLanguageChanged(IntPtr data)
    {
      if( _applicationLanguageChangedEventHandler != null )
      {
        _applicationLanguageChangedEventHandler( this, null );
      }
    }


    private EventHandler _applicationRegionChangedEventHandler;
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void ApplicationRegionChangedEventCallbackType(IntPtr data);
    private ApplicationRegionChangedEventCallbackType _applicationRegionChangedEventCallback;

    /**
      * @brief Event for RegionChanged signal which can be used to subscribe/unsubscribe the event handler
      *  provided by the user. RegionChanged signal is emitted when the region of the device is changed.
      */
    public event EventHandler RegionChanged
    {
      add
      {
        if( _applicationRegionChangedEventHandler != null )
        {
          _applicationRegionChangedEventCallback = OnNUIApplicationRegionChanged;
          this.RegionChangedSignal().Connect( _applicationRegionChangedEventCallback );
        }

        _applicationRegionChangedEventHandler += value;
      }

      remove
      {
        if( _applicationRegionChangedEventHandler != null )
        {
          this.RegionChangedSignal().Disconnect( _applicationRegionChangedEventCallback );
        }

        _applicationRegionChangedEventHandler -= value;
      }
    }

    private void OnNUIApplicationRegionChanged(IntPtr data)
    {
      if( _applicationRegionChangedEventHandler != null )
      {
        _applicationRegionChangedEventHandler( this, null );
      }
    }



    private EventHandler _applicationBatteryLowEventHandler;
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void ApplicationBatteryLowEventCallbackType(IntPtr data);
    private ApplicationBatteryLowEventCallbackType _applicationBatteryLowEventCallback;

    /**
      * @brief Event for BatteryLow signal which can be used to subscribe/unsubscribe the event handler
      * provided by the user. BatteryLow signal is emitted when the battery level of the device is low.
      */
    public event EventHandler BatteryLow
    {
      add
      {
        if( _applicationBatteryLowEventHandler == null )
        {
          _applicationBatteryLowEventCallback = OnNUIApplicationBatteryLow;
          this.BatteryLowSignal().Connect( _applicationBatteryLowEventCallback );
        }

        _applicationBatteryLowEventHandler += value;
      }

      remove
      {
        if( _applicationBatteryLowEventHandler != null )
        {
          this.BatteryLowSignal().Disconnect( _applicationBatteryLowEventCallback );
        }

        _applicationBatteryLowEventHandler -= value;
      }
    }

    private void OnNUIApplicationBatteryLow(IntPtr data)
    {
      if( _applicationBatteryLowEventHandler != null )
      {
        _applicationBatteryLowEventHandler( this, null );
      }
    }


    private EventHandler _applicationMemoryLowEventHandler;
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void ApplicationMemoryLowEventCallbackType(IntPtr data);
    private ApplicationMemoryLowEventCallbackType _applicationMemoryLowEventCallback;

    /**
      * @brief Event for Paused signal which can be used to subscribe/unsubscribe the event handler
      * provided by the user. Paused signal is emitted when application is paused
      */
    public event EventHandler MemoryLow
    {
      add
      {
        if( _applicationMemoryLowEventHandler == null )
        {
          _applicationMemoryLowEventCallback = OnNUIApplicationMemoryLow;
          this.MemoryLowSignal().Connect( _applicationMemoryLowEventCallback );
        }

        _applicationMemoryLowEventHandler += value;
      }

      remove
      {
        if( _applicationMemoryLowEventHandler != null )
        {
          this.MemoryLowSignal().Disconnect( _applicationMemoryLowEventCallback );
        }

        _applicationMemoryLowEventHandler -= value;
      }
    }

    private void OnNUIApplicationMemoryLow(IntPtr data)
    {
      if( _applicationMemoryLowEventHandler != null )
      {
        _applicationMemoryLowEventHandler( this, null );
      }
    }

    /**
      * @brief Event arguments that passed via NUIApplicationAppControl	 signal
      *
      */
    public class NUIApplicationAppControlEventArgs : EventArgs
    {
      private IntPtr _voidp;
      /**
        * @brief VoidP - contains the information about why the application is launched
        *
        */
      public IntPtr VoidP
      {
        get
        {
          return _voidp;
        }
        set
        {
          _voidp = value;
        }
      }
    }

    private EventHandler<NUIApplicationAppControlEventArgs> _applicationAppControlEventHandler;
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate void ApplicationAppControlEventCallbackType(IntPtr application, IntPtr voidp);
    private ApplicationAppControlEventCallbackType _applicationAppControlEventCallback;

    /**
      * @brief Event for AppControl signal which can be used to subscribe/unsubscribe the event handler
      * (in the type of NUIApplicationAppControlEventHandler-DaliEventHandler<object,NUIApplicationAppControlEventArgs>)
      *  provided by the user. AppControl signal is emitted when another application sends a launch request to the application.
      */
    public event EventHandler<NUIApplicationAppControlEventArgs> AppControl
    {
      add
      {
        if( _applicationAppControlEventHandler != null )
        {
          _applicationAppControlEventCallback = OnNUIApplicationAppControl;
          this.AppControlSignal().Connect( _applicationAppControlEventCallback );
        }

        _applicationAppControlEventHandler += value;
      }

      remove
      {
        if( _applicationAppControlEventHandler != null )
        {
          this.AppControlSignal().Disconnect( _applicationAppControlEventCallback );
        }

        _applicationAppControlEventHandler -= value;
      }
    }

    private void OnNUIApplicationAppControl(IntPtr application, IntPtr voidp)
    {
      NUIApplicationAppControlEventArgs e = new NUIApplicationAppControlEventArgs();
      e.VoidP = voidp;

      if ( _applicationAppControlEventHandler != null )
      {
        _applicationAppControlEventHandler(this, e);
      }
    }



    private static Application instance; // singleton

    public delegate void InitDelegate();

    public delegate void TerminateDelegate();

    public delegate void PauseDelegate();

    public delegate void ResumeDelegate();

    public delegate void ResizeDelegate();

    public delegate void AppControlDelegate();

    public delegate void LanguageChangedDelegate();

    public delegate void RegionChangedDelegate();

    public delegate void BatteryLowDelegate();

    public delegate void MemoryLowDelegate();

    [System.Runtime.InteropServices.UnmanagedFunctionPointer(System.Runtime.InteropServices.CallingConvention.StdCall)]
    internal delegate void InitDelegateInternal();

    [System.Runtime.InteropServices.UnmanagedFunctionPointer(System.Runtime.InteropServices.CallingConvention.StdCall)]
    internal delegate void TerminateDelegateInternal();

    [System.Runtime.InteropServices.UnmanagedFunctionPointer(System.Runtime.InteropServices.CallingConvention.StdCall)]
    internal delegate void PauseDelegateInternal();

    [System.Runtime.InteropServices.UnmanagedFunctionPointer(System.Runtime.InteropServices.CallingConvention.StdCall)]
    internal delegate void ResumeDelegateInternal();

    [System.Runtime.InteropServices.UnmanagedFunctionPointer(System.Runtime.InteropServices.CallingConvention.StdCall)]
    internal delegate void ResizeDelegateInternal();

    [System.Runtime.InteropServices.UnmanagedFunctionPointer(System.Runtime.InteropServices.CallingConvention.StdCall)]
    internal delegate void AppControlDelegateInternal();

    [System.Runtime.InteropServices.UnmanagedFunctionPointer(System.Runtime.InteropServices.CallingConvention.StdCall)]
    internal delegate void LanguageChangedDelegateInternal();

    [System.Runtime.InteropServices.UnmanagedFunctionPointer(System.Runtime.InteropServices.CallingConvention.StdCall)]
    internal delegate void RegionChangedDelegateInternal();

    [System.Runtime.InteropServices.UnmanagedFunctionPointer(System.Runtime.InteropServices.CallingConvention.StdCall)]
    internal delegate void BatteryLowDelegateInternal();

    [System.Runtime.InteropServices.UnmanagedFunctionPointer(System.Runtime.InteropServices.CallingConvention.StdCall)]
    internal delegate void MemoryLowDelegateInternal();

    static void Initialize()
    {
      //	instance.InitDelegate();
    }

    public static Application Instance
    {
       get
       {
            return instance;
       }
    }

    public static Application GetApplicationFromPtr(global::System.IntPtr cPtr) {
      Application ret = new Application(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }

    internal void SetupDelegates() {
      InitDelegateInternal initializeCallback = new InitDelegateInternal( Initialize );
      System.Console.WriteLine( "InitSignal connection count");

      this.InitSignal().Connect( initializeCallback );
      //Console.WriteLine( "InitSignal connection count = " + app.InitSignal().GetConnectionCount() );
    }

    public static Application NewApplication() {
     instance = NewApplication("", Application.WINDOW_MODE.OPAQUE);
     return instance;
    }

    public static Application NewApplication(string stylesheet) {
      instance = NewApplication(stylesheet, Application.WINDOW_MODE.OPAQUE);
      return instance;
    }

    public static Application NewApplication(string stylesheet, Application.WINDOW_MODE windowMode) {

      Application ret = New(1, stylesheet, windowMode);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();

      // we've got an application now connect the signals
      ret.SetupDelegates();
      // set the singleton
      instance = ret;
      return ret;
    }

    public bool AddIdle(System.Delegate func) {
      System.IntPtr ip = System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(func);
      System.IntPtr ip2 = NDalicManualPINVOKE.MakeCallback(new System.Runtime.InteropServices.HandleRef(this, ip));

      bool ret = NDalicPINVOKE.Application_AddIdle(swigCPtr, new System.Runtime.InteropServices.HandleRef(this, ip2));

      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }

    
  
  /**
  * Outer::outer_method(int)
  */
  public static Application New() {
    Application ret = new Application(NDalicPINVOKE.Application_New__SWIG_0(), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Application New(int argc) {
    Application ret = new Application(NDalicPINVOKE.Application_New__SWIG_1(argc), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Application New(int argc, string stylesheet) {
    Application ret = new Application(NDalicPINVOKE.Application_New__SWIG_2(argc, stylesheet), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Application New(int argc, string stylesheet, Application.WINDOW_MODE windowMode) {
    Application ret = new Application(NDalicPINVOKE.Application_New__SWIG_3(argc, stylesheet, (int)windowMode), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Application() : this(NDalicPINVOKE.new_Application__SWIG_0(), true) {
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
  }

  public Application(Application application) : this(NDalicPINVOKE.new_Application__SWIG_1(Application.getCPtr(application)), true) {
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
  }

  public Application Assign(Application application) {
    Application ret = new Application(NDalicPINVOKE.Application_Assign(swigCPtr, Application.getCPtr(application)), false);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void MainLoop() {
    NDalicPINVOKE.Application_MainLoop__SWIG_0(swigCPtr);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
  }

  public void MainLoop(SWIGTYPE_p_Configuration__ContextLoss configuration) {
    NDalicPINVOKE.Application_MainLoop__SWIG_1(swigCPtr, SWIGTYPE_p_Configuration__ContextLoss.getCPtr(configuration));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Lower() {
    NDalicPINVOKE.Application_Lower(swigCPtr);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Quit() {
    NDalicPINVOKE.Application_Quit(swigCPtr);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool AddIdle(SWIGTYPE_p_Dali__CallbackBase callback) {
    bool ret = NDalicPINVOKE.Application_AddIdle(swigCPtr, SWIGTYPE_p_Dali__CallbackBase.getCPtr(callback));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Window GetWindow() {
    Window ret = new Window(NDalicPINVOKE.Application_GetWindow(swigCPtr), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ReplaceWindow(RectInteger windowPosition, string name) {
    NDalicPINVOKE.Application_ReplaceWindow(swigCPtr, RectInteger.getCPtr(windowPosition), name);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string GetResourcePath() {
    string ret = NDalicPINVOKE.Application_GetResourcePath();
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetViewMode(ViewMode viewMode) {
    NDalicPINVOKE.Application_SetViewMode(swigCPtr, (int)viewMode);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
  }

  public ViewMode GetViewMode() {
    ViewMode ret = (ViewMode)NDalicPINVOKE.Application_GetViewMode(swigCPtr);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetStereoBase(float stereoBase) {
    NDalicPINVOKE.Application_SetStereoBase(swigCPtr, stereoBase);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetStereoBase() {
    float ret = NDalicPINVOKE.Application_GetStereoBase(swigCPtr);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ApplicationSignal InitSignal() {
    ApplicationSignal ret = new ApplicationSignal(NDalicPINVOKE.Application_InitSignal(swigCPtr), false);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ApplicationSignal TerminateSignal() {
    ApplicationSignal ret = new ApplicationSignal(NDalicPINVOKE.Application_TerminateSignal(swigCPtr), false);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ApplicationSignal PauseSignal() {
    ApplicationSignal ret = new ApplicationSignal(NDalicPINVOKE.Application_PauseSignal(swigCPtr), false);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ApplicationSignal ResumeSignal() {
    ApplicationSignal ret = new ApplicationSignal(NDalicPINVOKE.Application_ResumeSignal(swigCPtr), false);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ApplicationSignal ResetSignal() {
    ApplicationSignal ret = new ApplicationSignal(NDalicPINVOKE.Application_ResetSignal(swigCPtr), false);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ApplicationSignal ResizeSignal() {
    ApplicationSignal ret = new ApplicationSignal(NDalicPINVOKE.Application_ResizeSignal(swigCPtr), false);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ApplicationControlSignal AppControlSignal() {
    ApplicationControlSignal ret = new ApplicationControlSignal(NDalicPINVOKE.Application_AppControlSignal(swigCPtr), false);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ApplicationSignal LanguageChangedSignal() {
    ApplicationSignal ret = new ApplicationSignal(NDalicPINVOKE.Application_LanguageChangedSignal(swigCPtr), false);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ApplicationSignal RegionChangedSignal() {
    ApplicationSignal ret = new ApplicationSignal(NDalicPINVOKE.Application_RegionChangedSignal(swigCPtr), false);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ApplicationSignal BatteryLowSignal() {
    ApplicationSignal ret = new ApplicationSignal(NDalicPINVOKE.Application_BatteryLowSignal(swigCPtr), false);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ApplicationSignal MemoryLowSignal() {
    ApplicationSignal ret = new ApplicationSignal(NDalicPINVOKE.Application_MemoryLowSignal(swigCPtr), false);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum WINDOW_MODE {
    OPAQUE = 0,
    TRANSPARENT = 1
  }

}

}
